import * as messages from '@cucumber/messages';
import { Attachment, Duration, Hook, Location, Meta, Pickle, PickleStep, Step, StepDefinition, Suggestion, TestCase, TestCaseFinished, TestCaseStarted, TestRunFinished, TestRunHookFinished, TestRunHookStarted, TestRunStarted, TestStep, TestStepFinished, TestStepResult, TestStepResultStatus, TestStepStarted, UndefinedParameterType } from '@cucumber/messages';
import { Lineage } from './Lineage';
export default class Query {
    private readonly testStepResultByPickleId;
    private readonly testStepResultsByPickleStepId;
    private readonly testCaseByPickleId;
    private readonly pickleIdByTestStepId;
    private readonly pickleStepIdByTestStepId;
    private readonly testStepResultsbyTestStepId;
    private readonly testStepIdsByPickleStepId;
    private readonly hooksById;
    private readonly attachmentsByTestStepId;
    private readonly stepMatchArgumentsListsByPickleStepId;
    private meta;
    private testRunStarted;
    private testRunFinished;
    private readonly testCaseStartedById;
    private readonly lineageById;
    private readonly stepById;
    private readonly pickleById;
    private readonly pickleStepById;
    private readonly stepDefinitionById;
    private readonly testCaseById;
    private readonly testStepById;
    private readonly testCaseFinishedByTestCaseStartedId;
    private readonly testRunHookStartedById;
    private readonly testRunHookFinishedByTestRunHookStartedId;
    private readonly testStepStartedByTestCaseStartedId;
    private readonly testStepFinishedByTestCaseStartedId;
    private readonly attachmentsByTestCaseStartedId;
    private readonly attachmentsByTestRunHookStartedId;
    private readonly suggestionsByPickleStepId;
    private readonly undefinedParameterTypes;
    update(envelope: messages.Envelope): void;
    private updateGherkinDocument;
    private updateFeature;
    private updateRule;
    private updateScenario;
    private updateSteps;
    private updatePickle;
    private updateTestRunHookStarted;
    private updateTestRunHookFinished;
    private updateTestCase;
    private updateTestCaseStarted;
    private updateTestStepStarted;
    private updateAttachment;
    private updateTestStepFinished;
    private updateTestCaseFinished;
    private updateSuggestion;
    private updateUndefinedParameterType;
    /**
     * Gets all the results for multiple pickle steps
     * @param pickleStepIds
     */
    getPickleStepTestStepResults(pickleStepIds: readonly string[]): readonly messages.TestStepResult[];
    /**
     * Gets all the results for multiple pickles
     * @param pickleIds
     */
    getPickleTestStepResults(pickleIds: readonly string[]): readonly messages.TestStepResult[];
    /**
     * Gets all the attachments for multiple pickle steps
     * @param pickleStepIds
     */
    getPickleStepAttachments(pickleStepIds: readonly string[]): readonly messages.Attachment[];
    getTestStepsAttachments(testStepIds: readonly string[]): readonly messages.Attachment[];
    /**
     * Get StepMatchArguments for a pickle step
     * @param pickleStepId
     */
    getStepMatchArgumentsLists(pickleStepId: string): readonly messages.StepMatchArgumentsList[] | undefined;
    getHook(hookId: string): messages.Hook;
    getBeforeHookSteps(pickleId: string): readonly messages.TestStep[];
    getAfterHookSteps(pickleId: string): readonly messages.TestStep[];
    private identifyHookSteps;
    getTestStepResults(testStepId: string): messages.TestStepResult[];
    getStatusCounts(pickleIds: readonly string[]): Partial<Record<messages.TestStepResultStatus, number>>;
    countMostSevereTestStepResultStatus(): Record<TestStepResultStatus, number>;
    countTestCasesStarted(): number;
    findAllPickles(): ReadonlyArray<Pickle>;
    findAllPickleSteps(): ReadonlyArray<PickleStep>;
    findAllStepDefinitions(): ReadonlyArray<StepDefinition>;
    findAllTestCaseStarted(): ReadonlyArray<TestCaseStarted>;
    findAllTestCaseFinished(): ReadonlyArray<TestCaseFinished>;
    findAllTestSteps(): ReadonlyArray<TestStep>;
    findAllTestStepStarted(): ReadonlyArray<TestStepStarted>;
    findAllTestStepFinished(): ReadonlyArray<TestStepFinished>;
    findAllTestRunHookStarted(): ReadonlyArray<TestRunHookStarted>;
    findAllTestRunHookFinished(): ReadonlyArray<TestRunHookFinished>;
    findAllUndefinedParameterTypes(): ReadonlyArray<UndefinedParameterType>;
    findAttachmentsBy(element: TestStepFinished | TestRunHookFinished): ReadonlyArray<Attachment>;
    findHookBy(item: TestStep | TestRunHookStarted | TestRunHookFinished): Hook | undefined;
    findMeta(): Meta | undefined;
    findMostSevereTestStepResultBy(element: TestCaseStarted | TestCaseFinished): TestStepResult | undefined;
    findLocationOf(pickle: Pickle): Location | undefined;
    findPickleBy(element: TestCaseStarted | TestCaseFinished | TestStepStarted): Pickle | undefined;
    findPickleStepBy(testStep: TestStep): PickleStep | undefined;
    findStepBy(pickleStep: PickleStep): Step | undefined;
    findStepDefinitionsBy(testStep: TestStep): ReadonlyArray<StepDefinition>;
    findSuggestionsBy(element: PickleStep | Pickle): ReadonlyArray<Suggestion>;
    findUnambiguousStepDefinitionBy(testStep: TestStep): StepDefinition | undefined;
    findTestCaseBy(element: TestCaseStarted | TestCaseFinished | TestStepStarted | TestStepFinished): TestCase | undefined;
    findTestCaseDurationBy(element: TestCaseStarted | TestCaseFinished): Duration | undefined;
    findTestCaseStartedBy(element: TestCaseFinished | TestStepStarted | TestStepFinished): TestCaseStarted | undefined;
    findTestCaseFinishedBy(testCaseStarted: TestCaseStarted): TestCaseFinished | undefined;
    findTestRunHookStartedBy(testRunHookFinished: TestRunHookFinished): TestRunHookStarted | undefined;
    findTestRunHookFinishedBy(testRunHookStarted: TestRunHookStarted): TestRunHookFinished | undefined;
    findTestRunDuration(): Duration | undefined;
    findTestRunFinished(): TestRunFinished | undefined;
    findTestRunStarted(): TestRunStarted | undefined;
    findTestStepBy(element: TestStepStarted | TestStepFinished): TestStep | undefined;
    findTestStepsStartedBy(element: TestCaseStarted | TestCaseFinished): ReadonlyArray<TestStepStarted>;
    findTestStepsFinishedBy(element: TestCaseStarted | TestCaseFinished): ReadonlyArray<TestStepFinished>;
    findTestStepFinishedAndTestStepBy(testCaseStarted: TestCaseStarted): ReadonlyArray<[TestStepFinished, TestStep]>;
    findLineageBy(element: Pickle | TestCaseStarted | TestCaseFinished): Lineage | undefined;
}
//# sourceMappingURL=Query.d.ts.map